[{"C:\\prog\\MovieList\\movielist\\src\\index.tsx":"1","C:\\prog\\MovieList\\movielist\\src\\App.tsx":"2","C:\\prog\\MovieList\\movielist\\src\\components\\SearchForm.tsx":"3","C:\\prog\\MovieList\\movielist\\src\\hooks\\useAsync.ts":"4","C:\\prog\\MovieList\\movielist\\src\\components\\MainPage.tsx":"5","C:\\prog\\MovieList\\movielist\\src\\api\\moviesAPI.ts":"6","C:\\prog\\MovieList\\movielist\\src\\reducers\\movieReducer\\actionCreators.ts":"7","C:\\prog\\MovieList\\movielist\\src\\api\\axios.ts":"8","C:\\prog\\MovieList\\movielist\\src\\reducers\\movieReducer\\actionTypes.ts":"9","C:\\prog\\MovieList\\movielist\\src\\reducers\\movieReducer\\movieReducer.ts":"10","C:\\prog\\MovieList\\movielist\\src\\components\\Movie.tsx":"11"},{"size":287,"mtime":1610999765867,"results":"12","hashOfConfig":"13"},{"size":4221,"mtime":1611175446269,"results":"14","hashOfConfig":"13"},{"size":4120,"mtime":1611150191602,"results":"15","hashOfConfig":"13"},{"size":1443,"mtime":1611124168874,"results":"16","hashOfConfig":"13"},{"size":2930,"mtime":1611173442174,"results":"17","hashOfConfig":"13"},{"size":2350,"mtime":1611152331942,"results":"18","hashOfConfig":"13"},{"size":1284,"mtime":1611142506584,"results":"19","hashOfConfig":"13"},{"size":267,"mtime":1610999765865,"results":"20","hashOfConfig":"13"},{"size":1395,"mtime":1611142506567,"results":"21","hashOfConfig":"13"},{"size":3427,"mtime":1611171638301,"results":"22","hashOfConfig":"13"},{"size":4484,"mtime":1611175702757,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"zi5g2j",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\prog\\MovieList\\movielist\\src\\index.tsx",[],["51","52"],"C:\\prog\\MovieList\\movielist\\src\\App.tsx",[],["53","54"],"C:\\prog\\MovieList\\movielist\\src\\components\\SearchForm.tsx",["55","56","57","58","59","60","61","62","63","64","65","66","67","68"],"import React, {Dispatch, Reducer, SetStateAction, useEffect, useReducer, useState} from 'react'\r\nimport { Input, Button, Checkbox, Tooltip, Select, Form} from 'antd';\r\nimport movieReducer, {\r\n    GenreInterface,\r\n    GenreStateInterface,\r\n    initialState,\r\n    State\r\n} from \"../reducers/movieReducer/movieReducer\";\r\nimport {SearchQueryInterface} from \"../App\";\r\nimport moviesAPI from \"../api/moviesAPI\";\r\nimport {setGenres, setLoadingStatus} from \"../reducers/movieReducer/actionCreators\";\r\nimport {MovieActions} from \"../reducers/movieReducer/actionTypes\";\r\nimport {LoadingStatus} from \"../types\";\r\nimport {useAsync} from \"../hooks/useAsync\";\r\nimport styled from \"styled-components\";\r\n\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nconst SearchForm: React.FC<SearchFormProps> = ({setSearchQuery, genres, setPage}) => {\r\n\r\n    const [state, dispatch] = useReducer<Reducer<State, MovieActions>>(movieReducer, initialState);\r\n\r\n\r\n    const handleOnSortChange = (sortParameter: string): void => {\r\n        setSearchQuery((prevQuery) => ({ ...prevQuery, sort_by: sortParameter }))\r\n        setPage(1)\r\n    }\r\n\r\n    const handleOnGenreSelected = (genreId: number) => {\r\n        setSearchQuery( (prevQuery) => ({ ...prevQuery, with_genres: [ ...prevQuery.with_genres, genreId] }) )\r\n        setPage(1)\r\n    }\r\n\r\n    const handleOnGenreDeselected = (genreId: number) => {\r\n        setSearchQuery( (prevQuery) => ({ ...prevQuery, with_genres: prevQuery.with_genres.filter((id) => id !== genreId)}) )\r\n        setPage(1)\r\n    }\r\n\r\n    const onFormChangeHandler = (e: any) => {\r\n    }\r\n\r\n        const options = genres.map((genreObject: any) => <Option key={genreObject.id} value={genreObject.id}>{genreObject.name}</Option>);\r\n\r\n    return (\r\n        <SearchFormContainer>\r\n            <FormContainer onChange={onFormChangeHandler}>\r\n                <Form.Item\r\n                    name=\"sortBy\"\r\n                >\r\n                    <SortFormContainer>\r\n                        <Label htmlFor=\"sortBy\">Sort by:</Label>\r\n                        <Select style={{width: 200}} id=\"sortBy\" onSelect={handleOnSortChange}>\r\n                            <Option value=\"popularity.desc\" >Popularity (desc.)</Option>\r\n                            <Option value=\"popularity.asc\">Popularity (asc.)</Option>\r\n                            <Option value=\"vote_average.desc\" >Rating (desc.)</Option>\r\n                            <Option value=\"vote_average.asc\">Rating (asc.)</Option>\r\n                            <Option value=\"release_date.desc\">Recency (desc.)</Option>\r\n                            <Option value=\"release_date.asc\">Recency (asc.)</Option>\r\n                        </Select>\r\n                    </SortFormContainer>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"filerBy\"\r\n                >\r\n                    <GenreFilterContainer>\r\n                        <Label htmlFor=\"sortBy\">Genres:</Label>\r\n                        <Select style={{width: 200}} id=\"filterByGenres\" onSelect={handleOnGenreSelected} onDeselect={handleOnGenreDeselected} mode=\"multiple\" showArrow>\r\n                            {options}\r\n                        </Select>\r\n                    </GenreFilterContainer>\r\n                </Form.Item>\r\n\r\n            </FormContainer>\r\n        </SearchFormContainer>\r\n    )\r\n}\r\n\r\nconst SearchFormContainer = styled.div`\r\ndisplay: flex;\r\njustify-content: flex-start;\r\n`\r\n\r\nconst FormContainer = styled(Form)`\r\ndisplay: flex; \r\njustify-content: flex-start;\r\ngap: 20px;\r\n\r\n@media (max-width: 600px) {\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 0;\r\n  }\r\n`\r\n\r\nconst SortFormContainer = styled.div`\r\n display: flex;\r\n flex-direction: column;\r\n max-width: 400px;\r\n`\r\n\r\nconst Label = styled.label`\r\nmin-width: 130px;\r\nmargin-bottom: 8px;\r\n`\r\n\r\nconst GenreFilterContainer = styled.div`\r\n display: flex;\r\n flex-direction: column;\r\n max-width: 400px;\r\n`\r\n\r\ninterface SearchFormProps {\r\n    setSearchQuery: Dispatch<SetStateAction<SearchQueryInterface>>\r\n    genres: GenreInterface[]\r\n    setPage: Dispatch<SetStateAction<number>>\r\n}\r\n\r\nexport default SearchForm;","C:\\prog\\MovieList\\movielist\\src\\hooks\\useAsync.ts",["69"],"C:\\prog\\MovieList\\movielist\\src\\components\\MainPage.tsx",["70","71","72"],"import movieReducer, {GenreStateInterface, initialState, State} from \"../reducers/movieReducer/movieReducer\";\r\nimport React, {Dispatch} from \"react\";\r\nimport {StarFilled} from \"@ant-design/icons/lib\";\r\nimport styled from \"styled-components\";\r\nimport {toggleFavourite} from \"../reducers/movieReducer/actionCreators\";\r\nimport {MovieActions} from \"../reducers/movieReducer/actionTypes\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Spin from \"antd/lib/spin\";\r\n\r\nconst MainPage: React.FC<MainPageProps> = ({ state, dispatch }) => {\r\n\r\n    const { results } = state.movies;\r\n\r\n    if (!results.length) return <Spin />\r\n\r\n    const movieElems = results.map((movie) => {\r\n        return (\r\n            <MovieCard key={movie.id}>\r\n                <ImageContainer>\r\n                    <img style={{minWidth: 200}} src={movie.poster_path\r\n                        ? `https://image.tmdb.org/t/p/w200/${movie.poster_path}`\r\n                        : 'https://source.unsplash.com/random/200x300'} alt=\"\"/>\r\n                </ImageContainer>\r\n                <MovieInfo>\r\n                    <InfoColumn>\r\n                        <MovieLink to={`movie/${movie.id}`}>{movie.title}</MovieLink>\r\n                        <div>Rating: {movie.vote_average}</div>\r\n                    </InfoColumn>\r\n                    <StarContainer><Star onClick={() => dispatch(toggleFavourite(movie.id))} isfavourite={movie.isFavourite}/></StarContainer>\r\n                </MovieInfo>\r\n            </MovieCard>\r\n        )\r\n    })\r\n    return <div>{movieElems}</div>\r\n}\r\n\r\ninterface MainPageProps {\r\n    state: State\r\n    dispatch: Dispatch<MovieActions>\r\n}\r\n\r\ninterface StarInterface {\r\n    isfavourite?: boolean\r\n}\r\n\r\nconst MovieLink = styled(Link)`\r\ncolor: peru;\r\nfont-size: 24px;\r\n\r\n&:hover {\r\ncolor: darkred;\r\n}\r\n\r\n@media (max-width: 600px) {\r\n    font-size: 16px;\r\n  }\r\n\r\n`\r\n\r\nconst Star = styled(StarFilled)<StarInterface>`\r\n  color: ${(props) => props.isfavourite ? 'gold' : 'grey'};\r\n  font-size: 32px;\r\n  \r\n  &:hover {\r\n    color: gold\r\n  }\r\n  \r\n  @media (max-width: 600px) {\r\n    font-size: 24px;\r\n  }\r\n`\r\n\r\nconst MovieCard = styled.div`\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    \r\n    margin-bottom: 20px;\r\n    max-width: 500px;\r\n    min-width: 200px;\r\n    \r\n    border-radius: 10px;\r\n    border: 2px solid rgba(2, 2, 2, 0.05);\r\n    overflow: hidden;\r\n\r\n@media (max-width: 600px) {\r\n    width: 200px;\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nconst MovieInfo = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align: left;\r\n    position: relative;\r\n    width: 100%;\r\n    padding: 15px;\r\n`\r\n\r\nconst StarContainer = styled.div`\r\n    position: absolute;\r\n    right: 10px;\r\n    bottom: 10px;\r\n`\r\n\r\nconst InfoColumn = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst ImageContainer = styled.div`\r\n    @media (max-width: 768px) {\r\n        margin: 0 auto;\r\n      }\r\n`\r\n\r\nexport default MainPage;","C:\\prog\\MovieList\\movielist\\src\\api\\moviesAPI.ts",[],"C:\\prog\\MovieList\\movielist\\src\\reducers\\movieReducer\\actionCreators.ts",["73"],"C:\\prog\\MovieList\\movielist\\src\\api\\axios.ts",[],"C:\\prog\\MovieList\\movielist\\src\\reducers\\movieReducer\\actionTypes.ts",["74"],"import {LoadingStatus} from \"../../types\";\r\nimport {GenreInterface, GenreStateInterface, MovieStateInterface} from \"./movieReducer\";\r\n\r\nexport enum MoviesActionTypes {\r\n    SET_MOVIES = 'movies/SET_MOVIES',\r\n    SET_GENRES = 'movies/SET_GENRES',\r\n    SET_LOADING_STATE = 'movies/SET_LOADING_STATE',\r\n    SET_PAGE = 'SET_PAGE',\r\n    ADD_MOVIES = 'ADD_MOVIES',\r\n    TOGGLE_FAVOURITE = 'TOGGLE_FAVOURITE'\r\n}\r\n\r\n\r\nexport interface SetMoviesActionInterface {\r\n    type: MoviesActionTypes.SET_MOVIES\r\n    payload: MovieStateInterface;\r\n}\r\n\r\nexport interface AddMoviesActionInterface {\r\n    type: MoviesActionTypes.ADD_MOVIES\r\n    payload: MovieStateInterface;\r\n}\r\n\r\nexport interface SetGenresActionInterface {\r\n    type: MoviesActionTypes.SET_GENRES\r\n    payload: GenreStateInterface\r\n}\r\n\r\nexport interface SetMoviesLoadingStatusActionInterface {\r\n    type: MoviesActionTypes.SET_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\n\r\nexport interface SetPageActionInterface {\r\n    type: MoviesActionTypes.SET_PAGE;\r\n    payload: number;\r\n}\r\n\r\nexport interface ToggleFavouriteActionInterface {\r\n    type: MoviesActionTypes.TOGGLE_FAVOURITE;\r\n    payload: number;\r\n}\r\n\r\nexport type MovieActions =\r\n    | SetMoviesActionInterface\r\n    | SetGenresActionInterface\r\n    | SetMoviesLoadingStatusActionInterface\r\n    | SetPageActionInterface\r\n    | AddMoviesActionInterface\r\n    | ToggleFavouriteActionInterface\r\n","C:\\prog\\MovieList\\movielist\\src\\reducers\\movieReducer\\movieReducer.ts",[],"C:\\prog\\MovieList\\movielist\\src\\components\\Movie.tsx",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"75","replacedBy":"79"},{"ruleId":"77","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":1,"column":51,"nodeType":"83","messageId":"84","endLine":1,"endColumn":60},{"ruleId":"81","severity":1,"message":"85","line":1,"column":74,"nodeType":"83","messageId":"84","endLine":1,"endColumn":82},{"ruleId":"81","severity":1,"message":"86","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":15},{"ruleId":"81","severity":1,"message":"87","line":2,"column":17,"nodeType":"83","messageId":"84","endLine":2,"endColumn":23},{"ruleId":"81","severity":1,"message":"88","line":2,"column":25,"nodeType":"83","messageId":"84","endLine":2,"endColumn":33},{"ruleId":"81","severity":1,"message":"89","line":2,"column":35,"nodeType":"83","messageId":"84","endLine":2,"endColumn":42},{"ruleId":"81","severity":1,"message":"90","line":5,"column":5,"nodeType":"83","messageId":"84","endLine":5,"endColumn":24},{"ruleId":"81","severity":1,"message":"91","line":10,"column":8,"nodeType":"83","messageId":"84","endLine":10,"endColumn":17},{"ruleId":"81","severity":1,"message":"92","line":11,"column":9,"nodeType":"83","messageId":"84","endLine":11,"endColumn":18},{"ruleId":"81","severity":1,"message":"93","line":11,"column":20,"nodeType":"83","messageId":"84","endLine":11,"endColumn":36},{"ruleId":"81","severity":1,"message":"94","line":13,"column":9,"nodeType":"83","messageId":"84","endLine":13,"endColumn":22},{"ruleId":"81","severity":1,"message":"95","line":14,"column":9,"nodeType":"83","messageId":"84","endLine":14,"endColumn":17},{"ruleId":"81","severity":1,"message":"96","line":23,"column":12,"nodeType":"83","messageId":"84","endLine":23,"endColumn":17},{"ruleId":"81","severity":1,"message":"97","line":23,"column":19,"nodeType":"83","messageId":"84","endLine":23,"endColumn":27},{"ruleId":"81","severity":1,"message":"98","line":1,"column":8,"nodeType":"83","messageId":"84","endLine":1,"endColumn":13},{"ruleId":"81","severity":1,"message":"99","line":1,"column":8,"nodeType":"83","messageId":"84","endLine":1,"endColumn":20},{"ruleId":"81","severity":1,"message":"90","line":1,"column":23,"nodeType":"83","messageId":"84","endLine":1,"endColumn":42},{"ruleId":"81","severity":1,"message":"100","line":1,"column":44,"nodeType":"83","messageId":"84","endLine":1,"endColumn":56},{"ruleId":"81","severity":1,"message":"101","line":1,"column":9,"nodeType":"83","messageId":"84","endLine":1,"endColumn":23},{"ruleId":"81","severity":1,"message":"101","line":2,"column":9,"nodeType":"83","messageId":"84","endLine":2,"endColumn":23},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],["102"],["103"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'Checkbox' is defined but never used.","'Tooltip' is defined but never used.","'GenreStateInterface' is defined but never used.","'moviesAPI' is defined but never used.","'setGenres' is defined but never used.","'setLoadingStatus' is defined but never used.","'LoadingStatus' is defined but never used.","'useAsync' is defined but never used.","'state' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'React' is defined but never used.","'movieReducer' is defined but never used.","'initialState' is defined but never used.","'GenreInterface' is defined but never used.","no-global-assign","no-unsafe-negation"]