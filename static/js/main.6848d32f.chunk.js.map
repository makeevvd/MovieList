{"version":3,"sources":["reducers/movieReducer/actionTypes.ts","reducers/movieReducer/actionCreators.ts","components/MainPage.tsx","types.ts","reducers/movieReducer/movieReducer.ts","components/SearchForm.tsx","api/axios.ts","api/moviesAPI.ts","components/Movie.tsx","App.tsx","index.tsx"],"names":["MoviesActionTypes","setMovies","payload","type","SET_MOVIES","setLoadingStatus","SET_LOADING_STATE","LoadingStatus","MovieLink","styled","Link","Star","StarFilled","props","isfavourite","MovieCard","div","MovieInfo","StarContainer","InfoColumn","ImageContainer","MainPage","state","dispatch","results","movies","length","movieElems","map","movie","style","minWidth","src","poster_path","alt","to","id","title","vote_average","onClick","TOGGLE_FAVOURITE","isFavourite","initialState","page","total_pages","total_results","genres","NEVER","movieReducer","action","ADD_MOVIES","SET_GENRES","SET_PAGE","Option","Select","SearchFormContainer","FormContainer","Form","SortFormContainer","Label","label","GenreFilterContainer","SearchForm","setSearchQuery","setPage","useReducer","options","genreObject","value","name","onChange","e","Item","htmlFor","width","onSelect","sortParameter","prevQuery","sort_by","genreId","with_genres","onDeselect","filter","mode","showArrow","axios","defaults","params","instance","create","baseURL","timeout","moviesAPI","getMovies","searchQuery","join","get","then","data","getGenres","getMovie","Movie","useParams","useState","setMovie","useEffect","movieId","MovieHeader","PosterImage","backdrop_path","release_date","Minutes","className","runtime","MovieDescription","overview","img","span","initialize","initialSearchQuery","AppWrapper","TitleLink","App","element","setElement","prevY","useRef","observer","IntersectionObserver","entries","y","boundingClientRect","current","threshold","a","LOADING","LOADED","ERROR","loadAndSetMovies","currentElement","currentObserver","observe","unobserve","path","exact","ref","margin","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6848d32f.chunk.js","sourcesContent":["import {LoadingStatus} from \"../../types\";\r\nimport {GenreInterface, GenreStateInterface, MovieStateInterface} from \"./movieReducer\";\r\n\r\nexport enum MoviesActionTypes {\r\n    SET_MOVIES = 'movies/SET_MOVIES',\r\n    SET_GENRES = 'movies/SET_GENRES',\r\n    SET_LOADING_STATE = 'movies/SET_LOADING_STATE',\r\n    SET_PAGE = 'SET_PAGE',\r\n    ADD_MOVIES = 'ADD_MOVIES',\r\n    TOGGLE_FAVOURITE = 'TOGGLE_FAVOURITE'\r\n}\r\n\r\n\r\nexport interface SetMoviesActionInterface {\r\n    type: MoviesActionTypes.SET_MOVIES\r\n    payload: MovieStateInterface;\r\n}\r\n\r\nexport interface AddMoviesActionInterface {\r\n    type: MoviesActionTypes.ADD_MOVIES\r\n    payload: MovieStateInterface;\r\n}\r\n\r\nexport interface SetGenresActionInterface {\r\n    type: MoviesActionTypes.SET_GENRES\r\n    payload: GenreStateInterface\r\n}\r\n\r\nexport interface SetMoviesLoadingStatusActionInterface {\r\n    type: MoviesActionTypes.SET_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\n\r\nexport interface SetPageActionInterface {\r\n    type: MoviesActionTypes.SET_PAGE;\r\n    payload: number;\r\n}\r\n\r\nexport interface ToggleFavouriteActionInterface {\r\n    type: MoviesActionTypes.TOGGLE_FAVOURITE;\r\n    payload: number;\r\n}\r\n\r\nexport type MovieActions =\r\n    | SetMoviesActionInterface\r\n    | SetGenresActionInterface\r\n    | SetMoviesLoadingStatusActionInterface\r\n    | SetPageActionInterface\r\n    | AddMoviesActionInterface\r\n    | ToggleFavouriteActionInterface\r\n","import {GenreInterface, GenreStateInterface, MovieStateInterface} from \"./movieReducer\";\r\nimport {\r\n    AddMoviesActionInterface,\r\n    MoviesActionTypes,\r\n    SetGenresActionInterface,\r\n    SetMoviesActionInterface,\r\n    SetMoviesLoadingStatusActionInterface, SetPageActionInterface, ToggleFavouriteActionInterface\r\n} from \"./actionTypes\";\r\nimport {LoadingStatus} from \"../../types\";\r\n\r\nexport const setMovies = (payload: MovieStateInterface): SetMoviesActionInterface => ({\r\n    type: MoviesActionTypes.SET_MOVIES,\r\n    payload\r\n})\r\n\r\nexport const addMovies = (payload: MovieStateInterface): AddMoviesActionInterface => ({\r\n    type: MoviesActionTypes.ADD_MOVIES,\r\n    payload\r\n})\r\n\r\nexport const setGenres = (payload: GenreStateInterface): SetGenresActionInterface => ({\r\n    type: MoviesActionTypes.SET_GENRES,\r\n    payload\r\n})\r\n\r\nexport const setLoadingStatus = (payload: LoadingStatus): SetMoviesLoadingStatusActionInterface => ({\r\n    type: MoviesActionTypes.SET_LOADING_STATE,\r\n    payload\r\n})\r\n\r\nexport const toggleFavourite = (payload: number): ToggleFavouriteActionInterface => ({\r\n    type: MoviesActionTypes.TOGGLE_FAVOURITE,\r\n    payload\r\n})\r\n\r\nexport const setPage = (payload: number): SetPageActionInterface => ({\r\n    type: MoviesActionTypes.SET_PAGE,\r\n    payload\r\n})","import movieReducer, {GenreStateInterface, initialState, State} from \"../reducers/movieReducer/movieReducer\";\r\nimport React, {Dispatch} from \"react\";\r\nimport {StarFilled} from \"@ant-design/icons/lib\";\r\nimport styled from \"styled-components\";\r\nimport {toggleFavourite} from \"../reducers/movieReducer/actionCreators\";\r\nimport {MovieActions} from \"../reducers/movieReducer/actionTypes\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Spin from \"antd/lib/spin\";\r\n\r\nconst MainPage: React.FC<MainPageProps> = ({ state, dispatch }) => {\r\n\r\n    const { results } = state.movies;\r\n\r\n    if (!results.length) return <Spin />\r\n\r\n    const movieElems = results.map((movie) => {\r\n        return (\r\n            <MovieCard key={movie.id}>\r\n                <ImageContainer>\r\n                    <img style={{minWidth: 200}} src={movie.poster_path\r\n                        ? `https://image.tmdb.org/t/p/w200/${movie.poster_path}`\r\n                        : 'https://source.unsplash.com/random/200x300'} alt=\"\"/>\r\n                </ImageContainer>\r\n                <MovieInfo>\r\n                    <InfoColumn>\r\n                        <MovieLink to={`movie/${movie.id}`}>{movie.title}</MovieLink>\r\n                        <div>Rating: {movie.vote_average}</div>\r\n                    </InfoColumn>\r\n                    <StarContainer><Star onClick={() => dispatch(toggleFavourite(movie.id))} isfavourite={movie.isFavourite}/></StarContainer>\r\n                </MovieInfo>\r\n            </MovieCard>\r\n        )\r\n    })\r\n    return <div>{movieElems}</div>\r\n}\r\n\r\ninterface MainPageProps {\r\n    state: State\r\n    dispatch: Dispatch<MovieActions>\r\n}\r\n\r\ninterface StarInterface {\r\n    isfavourite?: boolean\r\n}\r\n\r\nconst MovieLink = styled(Link)`\r\ncolor: peru;\r\nfont-size: 24px;\r\n\r\n&:hover {\r\ncolor: darkred;\r\n}\r\n\r\n@media (max-width: 600px) {\r\n    font-size: 16px;\r\n  }\r\n\r\n`\r\n\r\nconst Star = styled(StarFilled)<StarInterface>`\r\n  color: ${(props) => props.isfavourite ? 'gold' : 'grey'};\r\n  font-size: 32px;\r\n  \r\n  &:hover {\r\n    color: gold\r\n  }\r\n  \r\n  @media (max-width: 600px) {\r\n    font-size: 24px;\r\n  }\r\n`\r\n\r\nconst MovieCard = styled.div`\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    \r\n    margin-bottom: 20px;\r\n    max-width: 500px;\r\n    min-width: 200px;\r\n    \r\n    border-radius: 10px;\r\n    border: 2px solid rgba(2, 2, 2, 0.05);\r\n    overflow: hidden;\r\n\r\n@media (max-width: 600px) {\r\n    width: 200px;\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nconst MovieInfo = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align: left;\r\n    position: relative;\r\n    width: 100%;\r\n    padding: 15px;\r\n`\r\n\r\nconst StarContainer = styled.div`\r\n    position: absolute;\r\n    right: 10px;\r\n    bottom: 10px;\r\n`\r\n\r\nconst InfoColumn = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst ImageContainer = styled.div`\r\n    @media (max-width: 768px) {\r\n        margin: 0 auto;\r\n      }\r\n`\r\n\r\nexport default MainPage;","export enum LoadingStatus {\r\n    LOADED = 'LOADED',\r\n    LOADING = 'LOADING',\r\n    ERROR = 'ERROR',\r\n    NEVER = 'NEVER',\r\n    // SUCCESS = 'SUCCESS',\r\n}","import {LoadingStatus} from \"../../types\";\r\nimport {MovieActions, MoviesActionTypes} from \"./actionTypes\";\r\n\r\n// page: 1\r\n// results: (20) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]\r\n// total_pages: 500\r\n// total_results: 10000\r\n//\r\n// adult: false\r\n// backdrop_path: \"/srYya1ZlI97Au4jUYAktDe3avyA.jpg\"\r\n// genre_ids: (3) [14, 28, 12]\r\n// id: 464052\r\n// original_language: \"en\"\r\n// original_title: \"Wonder Woman 1984\"\r\n// overview: \"Wonder Woman comes into conflict with the Soviet Union during the Cold War in the 1980s and finds a formidable foe by the name of the Cheetah.\"\r\n// popularity: 4160.738\r\n// poster_path: \"/8UlWHLMpgZm9bx6QYh0NFoq67TZ.jpg\"\r\n// release_date: \"2020-12-16\"\r\n// title: \"Wonder Woman 1984\"\r\n// video: false\r\n// vote_average: 7.1\r\n// vote_count: 2781\r\n\r\nexport interface MovieInterface {\r\n    isFavourite?: boolean\r\n    adult: boolean\r\n    backdrop_path: string\r\n    with_genres: number[]\r\n    id: number\r\n    original_language: string\r\n    original_title: string\r\n    overview: string\r\n    popularity: number\r\n    poster_path: string\r\n    release_date: string\r\n    title: string\r\n    video: boolean\r\n    vote_average: number\r\n    vote_count: number\r\n}\r\n\r\nexport interface MovieStateInterface {\r\n    page: number\r\n    results: MovieInterface[]\r\n    total_pages: number\r\n    total_results: number\r\n}\r\n\r\nexport interface GenreStateInterface {\r\n    genres: GenreInterface[]\r\n}\r\n\r\nexport interface GenreInterface {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport interface State {\r\n    movies: MovieStateInterface\r\n    genres: GenreInterface[]\r\n    LoadingStatus: LoadingStatus;\r\n}\r\n\r\nexport const initialState = {\r\n    // movies: {} as MovieStateInterface,\r\n    movies: {\r\n        page: 1,\r\n        results: [] as MovieInterface[],\r\n        total_pages: 500,\r\n        total_results: 10000\r\n    } ,\r\n    genres: [],\r\n    LoadingStatus: LoadingStatus.NEVER\r\n}\r\n\r\nconst movieReducer = (state: State = initialState, action: MovieActions):State => {\r\n    switch (action.type) {\r\n        case MoviesActionTypes.SET_MOVIES:\r\n            debugger;\r\n            return { ...state, movies: {...action.payload, results: action.payload.results.map((movie) => {\r\n                        return { ...movie, isFavourite: false }\r\n                    })}}\r\n\r\n        case MoviesActionTypes.ADD_MOVIES:\r\n            return { ...state, movies: { ...state.movies,\r\n                    total_pages: action.payload.total_pages,\r\n                    total_results: action.payload.total_results,\r\n                    results: [...state.movies.results, ...action.payload.results] } }\r\n\r\n        case MoviesActionTypes.SET_GENRES:\r\n            return { ...state, ...action.payload  }\r\n\r\n        case MoviesActionTypes.SET_LOADING_STATE:\r\n            return { ...state, LoadingStatus: action.payload }\r\n\r\n        case MoviesActionTypes.SET_PAGE:\r\n            return { ...state, movies: { ...state.movies, page: action.payload } }\r\n\r\n        case MoviesActionTypes.TOGGLE_FAVOURITE:\r\n            return { ...state, movies: { ...state.movies, results: state.movies.results.map((movie) => {\r\n                        return movie.id === action.payload ? {...movie, isFavourite: !movie.isFavourite} : movie\r\n                    })\r\n                }\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default movieReducer;","import React, {Dispatch, Reducer, SetStateAction, useEffect, useReducer, useState} from 'react'\r\nimport { Input, Button, Checkbox, Tooltip, Select, Form} from 'antd';\r\nimport movieReducer, {\r\n    GenreInterface,\r\n    GenreStateInterface,\r\n    initialState,\r\n    State\r\n} from \"../reducers/movieReducer/movieReducer\";\r\nimport {SearchQueryInterface} from \"../App\";\r\nimport moviesAPI from \"../api/moviesAPI\";\r\nimport {setGenres, setLoadingStatus} from \"../reducers/movieReducer/actionCreators\";\r\nimport {MovieActions} from \"../reducers/movieReducer/actionTypes\";\r\nimport {LoadingStatus} from \"../types\";\r\nimport {useAsync} from \"../hooks/useAsync\";\r\nimport styled from \"styled-components\";\r\n\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nconst SearchForm: React.FC<SearchFormProps> = ({setSearchQuery, genres, setPage}) => {\r\n\r\n    const [state, dispatch] = useReducer<Reducer<State, MovieActions>>(movieReducer, initialState);\r\n\r\n\r\n    const handleOnSortChange = (sortParameter: string): void => {\r\n        setSearchQuery((prevQuery) => ({ ...prevQuery, sort_by: sortParameter }))\r\n        setPage(1)\r\n    }\r\n\r\n    const handleOnGenreSelected = (genreId: number) => {\r\n        setSearchQuery( (prevQuery) => ({ ...prevQuery, with_genres: [ ...prevQuery.with_genres, genreId] }) )\r\n        setPage(1)\r\n    }\r\n\r\n    const handleOnGenreDeselected = (genreId: number) => {\r\n        setSearchQuery( (prevQuery) => ({ ...prevQuery, with_genres: prevQuery.with_genres.filter((id) => id !== genreId)}) )\r\n        setPage(1)\r\n    }\r\n\r\n    const onFormChangeHandler = (e: any) => {\r\n    }\r\n\r\n        const options = genres.map((genreObject: any) => <Option key={genreObject.id} value={genreObject.id}>{genreObject.name}</Option>);\r\n\r\n    return (\r\n        <SearchFormContainer>\r\n            <FormContainer onChange={onFormChangeHandler}>\r\n                <Form.Item\r\n                    name=\"sortBy\"\r\n                >\r\n                    <SortFormContainer>\r\n                        <Label htmlFor=\"sortBy\">Sort by:</Label>\r\n                        <Select style={{width: 200}} id=\"sortBy\" onSelect={handleOnSortChange}>\r\n                            <Option value=\"popularity.desc\" >Popularity (desc.)</Option>\r\n                            <Option value=\"popularity.asc\">Popularity (asc.)</Option>\r\n                            <Option value=\"vote_average.desc\" >Rating (desc.)</Option>\r\n                            <Option value=\"vote_average.asc\">Rating (asc.)</Option>\r\n                            <Option value=\"release_date.desc\">Recency (desc.)</Option>\r\n                            <Option value=\"release_date.asc\">Recency (asc.)</Option>\r\n                        </Select>\r\n                    </SortFormContainer>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"filerBy\"\r\n                >\r\n                    <GenreFilterContainer>\r\n                        <Label htmlFor=\"sortBy\">Genres:</Label>\r\n                        <Select style={{width: 200}} id=\"filterByGenres\" onSelect={handleOnGenreSelected} onDeselect={handleOnGenreDeselected} mode=\"multiple\" showArrow>\r\n                            {options}\r\n                        </Select>\r\n                    </GenreFilterContainer>\r\n                </Form.Item>\r\n\r\n            </FormContainer>\r\n        </SearchFormContainer>\r\n    )\r\n}\r\n\r\nconst SearchFormContainer = styled.div`\r\ndisplay: flex;\r\njustify-content: flex-start;\r\n`\r\n\r\nconst FormContainer = styled(Form)`\r\ndisplay: flex; \r\njustify-content: flex-start;\r\ngap: 20px;\r\n\r\n@media (max-width: 600px) {\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 0;\r\n  }\r\n`\r\n\r\nconst SortFormContainer = styled.div`\r\n display: flex;\r\n flex-direction: column;\r\n max-width: 400px;\r\n`\r\n\r\nconst Label = styled.label`\r\nmin-width: 130px;\r\nmargin-bottom: 8px;\r\n`\r\n\r\nconst GenreFilterContainer = styled.div`\r\n display: flex;\r\n flex-direction: column;\r\n max-width: 400px;\r\n`\r\n\r\ninterface SearchFormProps {\r\n    setSearchQuery: Dispatch<SetStateAction<SearchQueryInterface>>\r\n    genres: GenreInterface[]\r\n    setPage: Dispatch<SetStateAction<number>>\r\n}\r\n\r\nexport default SearchForm;","import axios from \"axios\";\r\n\r\naxios.defaults.params = {}\r\naxios.defaults.params['api_key'] = '4237669ebd35e8010beee2f55fd45546';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3/',\r\n    timeout: 1000,\r\n});\r\n\r\n\r\n\r\nexport default instance;","import axios from './axios'\r\nimport {GenreInterface, GenreStateInterface, MovieStateInterface} from \"../reducers/movieReducer/movieReducer\";\r\nimport {SearchQueryInterface} from \"../App\";\r\ninterface ParamsInterface {\r\n        sort_by: string\r\n        with_genres: string\r\n        page: number\r\n}\r\nconst moviesAPI = {\r\n    getMovies(searchQuery: SearchQueryInterface, page: number): Promise<MovieStateInterface> {\r\n        let params = {} as ParamsInterface;\r\n        if (searchQuery.sort_by) {\r\n            params.sort_by = searchQuery.sort_by;\r\n        }\r\n\r\n        if (searchQuery.with_genres.length) {\r\n            params.with_genres = searchQuery.with_genres.join(',');\r\n        }\r\n        params.page = page;\r\n        return axios.get('discover/movie', {\r\n            params\r\n        }).then(({data}) => data);\r\n    },\r\n\r\n    getGenres(): Promise<GenreStateInterface> {\r\n        const genres = axios.get('genre/movie/list').then(({data}) => data);\r\n        return genres\r\n    },\r\n\r\n    getMovie(id: number): Promise<MovieInterface> {\r\n        const movie = axios.get(`movie/${id}`).then(({data}) => data);\r\n        return movie\r\n    }\r\n}\r\n\r\ninterface SpokenLanguageInterface {\r\n    english_name: string\r\n    iso_639_1: string\r\n    name: string\r\n}\r\n\r\ninterface ProductionCountryInterface {\r\n    iso_3166_1: string\r\n    name: string\r\n}\r\n\r\ninterface ProductionCompanyInterface {\r\n    id: number\r\n    logo_path: string\r\n    origin_country: string\r\n}\r\ninterface BelongsToCollectionInterface {\r\n    id: number\r\n    name: string\r\n    poster_path: string\r\n    backdrop_path: string\r\n}\r\n\r\nexport interface MovieInterface {\r\n    adult: boolean\r\n    backdrop_path: string\r\n    genres: GenreInterface[]\r\n    id: number\r\n    original_language: string\r\n    original_title: string\r\n    overview: string\r\n    popularity: number\r\n    poster_path: string\r\n    release_date: string\r\n    title: string\r\n    video: boolean\r\n    vote_average: number\r\n    vote_count: number\r\n    budget: number\r\n    homepage: string\r\n    imdb_id: string\r\n    status: string\r\n    tagline: string\r\n    revenue: number\r\n    runtime: number\r\n    production_companies: ProductionCompanyInterface[]\r\n    production_countries: ProductionCountryInterface[]\r\n    spoken_languages: SpokenLanguageInterface[]\r\n    belongs_to_collection: BelongsToCollectionInterface\r\n}\r\n\r\nexport default moviesAPI","import React, {useState} from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport moviesAPI, {MovieInterface} from \"../api/moviesAPI\";\r\nimport styled from \"styled-components\";\r\nimport {useEffect} from \"react\";\r\nimport Spin from \"antd/lib/spin\";\r\n\r\ninterface ParamsInterface {\r\n    id?: string\r\n}\r\n\r\nexport const Movie: React.FC = () => {\r\n\r\n    const {id} = useParams<ParamsInterface>();\r\n\r\n    const [movie, setMovie] = useState<MovieInterface>();\r\n\r\n    useEffect(() => {\r\n        if (!id) return\r\n        let movieId = +id;\r\n        moviesAPI.getMovie(movieId).then(\r\n            (movie) => {\r\n                setMovie(movie)\r\n            }\r\n        )\r\n    }, [id])\r\n\r\n    if (!movie) return <Spin />\r\n\r\n    return (\r\n        <MovieCard>\r\n            <MovieInfo>\r\n                <MovieHeader>\r\n                    <PosterImage src={`https://image.tmdb.org/t/p/original${movie?.backdrop_path}`} alt=\"\"/>\r\n                    <div>\r\n                        <h1>{movie.title}</h1>\r\n                        <h4>{movie.release_date}</h4>\r\n                        <Minutes className=\"minutes\">{movie.runtime} min</Minutes>\r\n                    </div>\r\n                </MovieHeader>\r\n                <MovieDescription>\r\n                    <p className=\"text\">\r\n                        {movie.overview}\r\n                    </p>\r\n                </MovieDescription>\r\n            </MovieInfo>\r\n        </MovieCard>\r\n    )\r\n}\r\n\r\nconst PosterImage = styled.img`\r\n    position: relative;\r\n    float: left;\r\n    margin-right: 20px;\r\n    height: 120px;\r\n    box-shadow: 0 0 20px -10px rgba(0,0,0,0.5);\r\n`\r\nconst MovieCard = styled.div`\r\n    position: relative;\r\n    display: block;\r\n    width: 800px;\r\n    height: 350px;\r\n    //margin: 80px auto;\r\n    margin-top: 80px; \r\n    overflow: hidden;\r\n    border-radius: 10px;\r\n    transition: all 0.4s;\r\n    box-shadow: 0 0 120px -25px rgba(0,0,0, 0.5);\r\n  \r\n      &:hover{\r\n        transform: scale(1.02);\r\n        box-shadow: 0 0 80px -25px rgba(0,0,0, 0.5);\r\n        transition: all 0.4s;\r\n      }\r\n      \r\n      @media screen and (max-width: 1000px) {\r\n        margin-top: 20px;\r\n        width: 320px;\r\n        height: 100%;\r\n      }\r\n`\r\n\r\nconst MovieInfo = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 2;\r\n    border-radius: 10px;\r\n`\r\nconst MovieHeader = styled.div`\r\n     padding: 25px;\r\n     height: 40%;\r\n    \r\n     h1 {\r\n         color: black;\r\n         font-weight: 400;\r\n     }\r\n     h4 {\r\n         color: #555;\r\n         font-weight: 400;\r\n     }\r\n     \r\n     p {\r\n         display: inline-block;\r\n         color: #959595;\r\n         margin-left: 10px;\r\n     }\r\n     \r\n     \r\n     \r\n     //@media screen and (min-width: 768px) {\r\n     //  width: 65%;\r\n     //}\r\n`\r\n\r\nconst Minutes = styled.span`\r\n     display: inline-block;\r\n     margin-top: 15px;\r\n     color: #555;\r\n     padding: 5px;\r\n     border-radius: 5px;\r\n     border: 1px solid rgba(0,0,0,0.05);\r\n`\r\n\r\nconst MovieDescription = styled.div`\r\n     margin-top: 20px;\r\n     padding: 25px;\r\n     height: 50%;\r\n     \r\n     \r\n     \r\n     p {\r\n         color: #545454;\r\n     }\r\n     \r\n     @media screen and (max-width: 1000px) {\r\n     \r\n     & {\r\n      display: flex;\r\n      align-items: flex-end;\r\n      padding-top: 0;\r\n      padding-bottom: 0;\r\n     }\r\n        //p {\r\n        //    display: flex;\r\n        //}\r\n      }\r\n\r\n`\r\n\r\n//\r\n// @media screen and (min-width: 768px) {\r\n// .movie_header{\r\n//         width: 65%;\r\n//     }\r\n//\r\n// .movie_desc{\r\n//         width: 50%;\r\n//     }\r\n//\r\n// .info_section{\r\n//         background: linear-gradient(to right, #e5e6e6 50%, transparent 100%);\r\n//     }\r\n//\r\n// .blur_back{\r\n//         width: 80%;\r\n//         background-position: -100% 10% !important;\r\n//     }\r\n// }\r\n//\r\n// @media screen and (max-width: 768px) {\r\n// .movie_card{\r\n//         width: 95%;\r\n//         margin: 70px auto;\r\n//         min-height: 350px;\r\n//         height: auto;\r\n//     }\r\n//\r\n// .blur_back{\r\n//         width: 100%;\r\n//         background-position: 50% 50% !important;\r\n//     }\r\n//\r\n// .movie_header{\r\n//         width: 100%;\r\n//         margin-top: 85px;\r\n//     }\r\n//\r\n// .movie_desc{\r\n//         width: 100%;\r\n//     }\r\n//\r\n// .info_section{\r\n//         background: linear-gradient(to top, #e5e6e6 50%, transparent 100%);\r\n//         display: inline-grid;\r\n//     }\r\n// }\r\n//\r\n//\r\n// .bright_back{\r\n//     background: url(\"https://occ-0-2433-448.1.nflxso.net/art/cd5c9/3e192edf2027c536e25bb5d3b6ac93ced77cd5c9.jpg\");\r\n// }","import React, {Reducer, useEffect, useReducer, useRef, useState} from 'react';\r\nimport './App.css';\r\nimport MainPage from \"./components/MainPage\";\r\nimport SearchForm from \"./components/SearchForm\";\r\nimport \"antd/dist/antd.css\";\r\nimport movieReducer, {\r\n    initialState,\r\n    State\r\n} from \"./reducers/movieReducer/movieReducer\";\r\nimport {MovieActions} from \"./reducers/movieReducer/actionTypes\";\r\nimport {addMovies, setGenres, setLoadingStatus, setMovies} from \"./reducers/movieReducer/actionCreators\";\r\nimport {LoadingStatus} from \"./types\";\r\nimport moviesAPI from \"./api/moviesAPI\";\r\nimport styled from \"styled-components\";\r\nimport {Link, Route, Switch} from \"react-router-dom\";\r\nimport {Movie} from \"./components/Movie\";\r\n\r\nexport interface SearchQueryInterface {\r\n    sort_by: string;\r\n    with_genres: number[]\r\n}\r\n\r\n\r\n\r\nconst initialize = () => { return initialSearchQuery }\r\n\r\nfunction App() {\r\n    const [state, dispatch] = useReducer<Reducer<State, MovieActions>>(movieReducer, initialState);\r\n    const [element, setElement] = useState(null as any);\r\n    const [searchQuery, setSearchQuery] = useState<SearchQueryInterface>(initialize)\r\n    const [page, setPage] = useState<number>(1)\r\n    const prevY = useRef(0);\r\n\r\n    useEffect(() => {\r\n        moviesAPI.getGenres().then((genres) => {\r\n            dispatch(setGenres(genres))\r\n        });\r\n    }, [])\r\n\r\n\r\n    const observer = useRef(\r\n        new IntersectionObserver(\r\n            entries => {\r\n                const firstEntry = entries[0];\r\n                const y = firstEntry.boundingClientRect.y;\r\n\r\n                if (prevY.current > y) {\r\n                    setPage((page) => page + 1)\r\n                    // setTimeout(loadMore, 1000); // 1 sec delay\r\n                }\r\n\r\n                prevY.current = y;\r\n            },\r\n            { threshold: 1 }\r\n        )\r\n    );\r\n\r\n    useEffect(() => {\r\n        const loadAndSetMovies = async (searchQuery: any, page: any) => {\r\n            try {\r\n                dispatch(setLoadingStatus(LoadingStatus.LOADING))\r\n                const movies = await moviesAPI.getMovies(searchQuery, page);\r\n                if (page > 1) {\r\n                    dispatch(addMovies(movies))\r\n                } else {\r\n                    dispatch(setMovies(movies))\r\n                }\r\n                dispatch(setLoadingStatus(LoadingStatus.LOADED))\r\n            } catch (error) {\r\n                dispatch(setLoadingStatus(LoadingStatus.ERROR))\r\n            }\r\n        }\r\n        loadAndSetMovies(searchQuery, page);\r\n    }, [searchQuery, page])\r\n\r\n    useEffect(() => {\r\n        const currentElement = element;\r\n        const currentObserver = observer.current;\r\n\r\n        if (currentElement) {\r\n            currentObserver.observe(currentElement);\r\n        }\r\n\r\n        return () => {\r\n            if (currentElement) {\r\n                currentObserver.unobserve(currentElement);\r\n            }\r\n        };\r\n    }, [element]);\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppWrapper>\r\n                <TitleLink to='/'>Movie Search App</TitleLink>\r\n                <Switch>\r\n                    <Route path=\"/\" exact>\r\n                        <SearchForm setSearchQuery={setSearchQuery} genres={state.genres} setPage={setPage}/>\r\n                        <MainPage state={state} dispatch={dispatch}/>\r\n                        <div ref={setElement}>\r\n                            <button style={{margin: '0 auto'}}>Load More</button>\r\n                        </div>\r\n                    </Route>\r\n                    <Route path=\"/movie/:id\">\r\n                        <Movie />\r\n                    </Route>\r\n                </Switch>\r\n            </AppWrapper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const initialSearchQuery = {\r\n    sort_by: \"\",\r\n    with_genres: []\r\n}\r\n\r\nconst AppWrapper = styled.div`\r\n    margin: 0 auto;\r\n    padding: 40px 120px 120px 120px;\r\n\r\n@media (max-width: 600px) {\r\n    padding: 10px 30px 30px 30px;\r\n  }\r\n`\r\n\r\nconst TitleLink = styled(Link)`\r\n    font-size: 36px;\r\n    text-align: left;\r\n    margin-bottom: 40px;\r\n    font-weight: 700;\r\n    min-width: 206px;\r\n        @media (max-width: 600px) {\r\n            font-size: 24px;\r\n          }\r\n`\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>\r\n    ,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}